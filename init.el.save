(setq inhibit-startup-message t) ;; remove startup message

;; disable basic emacs tools
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)

;; package sources
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)

(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer mrh/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"))

(nvmap :keymaps 'override :prefix "SPC"
       "SPC"   '(counsel-M-x :which-key "M-x")
       "c c"   '(compile :which-key "Compile")
       "c C"   '(recompile :which-key "Recompile")
       "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
       "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
       )

(nvmap :keymaps 'override :prefix "SPC"
       "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
       "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
       "m ."   '(counsel-org-goto :which-key "Counsel org goto")
       "m e"   '(org-export-dispatch :which-key "Org export dispatch")
       "m f"   '(org-footnote-new :which-key "Org footnote new")
       "m h"   '(org-toggle-heading :which-key "Org toggle heading")
       "m i"   '(org-toggle-item :which-key "Org toggle item")
       "m n"   '(org-store-link :which-key "Org store link")
       "m o"   '(org-set-property :which-key "Org set property")
       "m t"   '(org-todo :which-key "Org todo")
       "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
       "m B"   '(org-babel-tangle :which-key "Org babel tangle")
       "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
       "m T"   '(org-todo-list :which-key "Org todo list")
       "o a"   '(org-agenda :which-key "Org agenda")
       )

(nvmap :prefix "SPC"
       "b s"   '(save-buffer :which-key "save buffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer")
       "b f"   '(find-file :which-key "find file")
       "w n"   '(evil-window-new :whick-key "open new window")
       "w c"   '(evil-window-delete :whick-key "close window")
       )

  ;; evil vi emulator
(use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1))

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   
;; evil collection (should include magit atsp)
;;(use-package evil-collection
;;  :after evil
;;  :ensure t
;;  :config
;;  (setq evil-collection-mode-list '(dashboard dired ibuffer))
;;  (evil-collection-init))
;;(use-package evil-tutor)

;; fonts
(set-face-attribute 'default nil
  :font "Ubuntu Mono"
  :height 80
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu Mono"
  :height 80
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Ubuntu Mono"
  :height 80
  :weight 'medium)

(use-package ivy
  :diminish
  :config
  (ivy-mode 1))

(column-number-mode)
(global-display-line-numbers-mode t)

;;(use-package projectile
;;  :diminish projectile-mode
;;  :config (projectile-mode)
;;  :custom ((projectile-completion-system 'ivy))
;;  :init
;;  (when (file-directory-p "~/code")
;;    (setq projectile-project-search-path '("~/code")))
;;  (setq projectile-switch-project-action #'projectile-dired))

;;(use-package counsel-projectile
;;  :config (counsel-projectile-mode))

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; show keybinds
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

;; set theme
(use-package doom-themes
  :ensure t)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(load-theme 'doom-one t)

;; modeline
(use-package doom-modeline
  :ensure t)
(doom-modeline-mode 1)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(magit counsel-projectile projectile general use-package evil-tutor evil-collection doom-themes doom-modeline)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
